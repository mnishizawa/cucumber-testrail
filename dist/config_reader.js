// Generated by CoffeeScript 1.11.1
(function() {
  var ConfigReader, REQUIRED_CONFIG_FIELDS, _,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('lodash');

  require('require-yaml');

  REQUIRED_CONFIG_FIELDS = ['project_id', 'project_symbol', 'testplan_id'];

  ConfigReader = (function() {
    function ConfigReader(config_file) {
      this.config_file = config_file != null ? config_file : {};
    }

    ConfigReader.prototype.parse = function() {
      var config, ref;
      config = require("" + this.config_file);
      config.suites = ((ref = config.suites) != null ? ref.map(function(arg) {
        var suite;
        suite = arg.suite;
        return suite;
      }) : void 0) || [];
      this._validateConfig(config);
      config.symbols = config.suites.map(function(arg) {
        var project_symbol;
        project_symbol = arg.project_symbol;
        return project_symbol;
      });
      return config;
    };

    ConfigReader.prototype._validateConfig = function(config) {
      if (!config.testrail_url) {
        throw new Error('cucumber_testrail.yml is missing testrail_url');
      }
      if (!config.suites.length) {
        throw new Error('cucumber_testrail.yml is missing suites');
      }
      return config.suites.forEach(function(config, index) {
        var missingFields, params;
        params = Object.keys(config);
        missingFields = _.compact(REQUIRED_CONFIG_FIELDS.map(function(field) {
          if (indexOf.call(params, field) < 0) {
            return field;
          }
        }));
        if (!missingFields.length) {
          return;
        }
        throw new Error("cucumber_testrail.yml is missing these required fields for suite " + (index + 1) + ": " + missingFields);
      });
    };

    return ConfigReader;

  })();

  module.exports = ConfigReader;

}).call(this);
