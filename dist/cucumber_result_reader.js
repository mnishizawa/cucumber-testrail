// Generated by CoffeeScript 1.11.1
(function() {
  var CucumberResultReader, TESTRAIL_STATUSES, fs;

  fs = require('mz/fs');

  TESTRAIL_STATUSES = {
    FAILED: 5,
    PASSED: 1
  };

  CucumberResultReader = (function() {
    function CucumberResultReader(arg, file) {
      var symbols;
      symbols = arg.symbols;
      this.file = file;
      this.symbols = symbols || {};
    }

    CucumberResultReader.prototype.parse = function() {
      var results, testRailMetrics;
      results = fs.readFileSync(this.file, 'utf8');
      testRailMetrics = {};
      this.symbols.forEach(function(item) {
        return testRailMetrics[item] = [];
      });
      JSON.parse(results).forEach((function(_this) {
        return function(result) {
          var ref;
          return (ref = result.elements) != null ? ref.forEach(function(arg) {
            var ref1, steps, tags, testrail_ids, type;
            tags = (ref1 = arg.tags) != null ? ref1 : [], type = arg.type, steps = arg.steps;
            testrail_ids = _this._testRailTags(tags);
            if (!(testrail_ids.length && type === 'scenario')) {
              return;
            }
            return testrail_ids.forEach(function(arg1) {
              var case_id, comment, name, ref2, ref3, status_id, symbol;
              name = arg1.name;
              ref2 = _this._parseName(name), symbol = ref2.symbol, case_id = ref2.case_id;
              ref3 = _this._examineScenario(steps), comment = ref3.comment, status_id = ref3.status_id;
              return testRailMetrics[symbol].push({
                case_id: case_id,
                status_id: status_id,
                comment: comment
              });
            });
          }) : void 0;
        };
      })(this));
      return testRailMetrics;
    };

    CucumberResultReader.prototype._examineScenario = function(steps) {
      var result, status_id;
      status_id = TESTRAIL_STATUSES.PASSED;
      result = {
        status_id: TESTRAIL_STATUSES.PASSED,
        comment: 'Automated Test Passed'
      };
      steps.forEach(function(step) {
        switch (step.result.status) {
          case 'passed':
          case 'skipped':
            break;
          case 'failed':
            return result = {
              status_id: TESTRAIL_STATUSES.FAILED,
              comment: step.result.error_message
            };
          default:
            throw new Error("unknown step result status: " + step.result.status);
        }
      });
      return result;
    };

    CucumberResultReader.prototype._parseName = function(name) {
      var _, case_id, ref, symbol;
      ref = name.split('-'), _ = ref[0], symbol = ref[1], case_id = ref[2];
      if (this.symbols.indexOf(symbol) === -1) {
        throw new Error("symbol " + symbol + " found in cucumber results is not configured in cucumber_testrail.yml");
      }
      if (!parseInt(case_id)) {
        throw new Error("case_id " + case_id + " found in cucumber results has an invalid format. id should be numeric");
      }
      return {
        symbol: symbol,
        case_id: case_id
      };
    };

    CucumberResultReader.prototype._testRailTags = function(tags) {
      return tags.filter(function(arg) {
        var name;
        name = arg.name;
        return name.indexOf('TestRail') !== -1;
      });
    };

    return CucumberResultReader;

  })();

  module.exports = CucumberResultReader;

}).call(this);
